import gradio as gr
import pytesseract
from PIL import Image

import re
from sympy import symbols, Eq, solve, sympify, sin, cos, tan, sqrt

# Load your Bangla Q&A database
with open("questions.json", "r", encoding="utf-8") as f:
    db = json.load(f)

# --- Detect if input is an equation ---
def is_equation(text):
    return "=" in text or re.search(r"[xyzŒ∏Œ±Œ≤]", text)

# --- Solve equations using Sympy ---
def solve_equation(text):
    try:
        # Replace Bangla/Greek letters with sympy-friendly versions
        text = text.replace("Œ∏", "theta").replace("Œ±", "alpha").replace("Œ≤", "beta")

        # Define possible symbols
        x, y, z, theta, alpha, beta = symbols('x y z theta alpha beta')

        # If equation has "=", split into left and right
        if "=" in text:
            left, right = text.split("=")
            left_expr = sympify(left)
            right_expr = sympify(right)
            eq = Eq(left_expr, right_expr)
        else:
            # If no "=", treat as expression = 0
            eq = Eq(sympify(text), 0)

        sol = solve(eq, dict=True)
        return f"‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®: {sol}"
    except Exception as e:
        return f"‡¶∏‡¶Æ‡ßÄ‡¶ï‡¶∞‡¶£ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‚ö†Ô∏è: {str(e)}"

# --- Search in JSON database ---
def search_db(query):
    for item in db:
        if item["question"] in query:
            return "\n".join(item["solution"])
    return None

# --- Main solver ---
def solve_problem(input_text, image):
    # If image uploaded ‚Üí OCR first
    if image is not None:
        ocr_text = pytesseract.image_to_string(Image.open(image), lang="eng+ben")
        input_text = ocr_text.strip()

    if not input_text:
        return "‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¶‡ßá‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§"

    # If looks like an equation ‚Üí solve with Sympy
    if is_equation(input_text):
        return solve_equation(input_text)

    # Else ‚Üí search in database
    ans = search_db(input_text)
    if ans:
        return ans

    return "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§ üòî, ‡¶è‡¶á ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ‡¶®‡ßá‡¶á‡•§"

# --- Gradio interface ---
demo = gr.Interface(
    fn=solve_problem,
    inputs=[gr.Textbox(label="‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"), gr.Image(type="filepath", label="‡¶Ö‡¶•‡¶¨‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®")],
    outputs="text",
    title="üìò ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡¶ï‡¶æ‡¶∞‡ßÄ",
    description="‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶¨‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®, ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶™‡¶æ‡¶®‡•§"
)

if __name__ == "__main__":
    demo.launch()
